import { readFile, writeFile } from 'fs';
import { existsSync, mkdirSync } from 'node:fs';
import { dirname, resolve } from 'node:path';
import { PluginOption } from 'vite';
import { parseString } from 'xml2js';

interface Options {
    /**
     * Path where the svg sprite file if found
     */
    svgFilePath: string
    /**
     * Path where the types file will be generated
     */
    typesFilePath: string | 'src/types/icon-names.ts'
    /**
     * Name of the type
     */
    typeName: string | 'IconName'
}

export function generateIconNames({ svgFilePath, typesFilePath, typeName }: Options): PluginOption {
    return {
        name: 'generate-icon-names',
        apply: 'serve',
        buildStart() {
            if (existSvgFile(svgFilePath)) {
                this.addWatchFile(svgFilePath);
                generateIconNamesTsFile(svgFilePath, typesFilePath, typeName);
            }
        },
        watchChange(id, change) {
            if (existSvgFile(svgFilePath)) {
                const svgFilePathResolved = resolve(svgFilePath);
                if (id === svgFilePathResolved && change.event === 'update') {
                    generateIconNamesTsFile(svgFilePath, typesFilePath, typeName);
                }

                if (id.includes('generate-icon-names.ts') && change.event === 'update') {
                    generateIconNamesTsFile(svgFilePath, typesFilePath, typeName);
                }
            }
        },
    };
}

function existSvgFile(svgFilePath: string) {
    const svgFilePathResolved = resolve(svgFilePath);
    if (!existsSync(svgFilePathResolved)) {
        console.error(`File not found: ${svgFilePathResolved}`);
        return false;
    } else {
        return true;
    }
}

function generateIconNamesTsFile(svgFilePath: string, typesFilePath: string = 'src/types/icon-names.ts', typeName: string = 'IconName') {
    console.log(`Generating ${typesFilePath}`);
    const typesFilePathResolved = resolve(typesFilePath);

    if (!existsSync(typesFilePathResolved)) {
        const dir = dirname(typesFilePath);
        mkdirSync(dir, { recursive: true });
    }

    const iconNames: Set<string> = new Set();

    readFile(svgFilePath, 'utf8', (err, result) => {
        consoleError(err)

        parseString(result, (err, result) => {
            consoleError(err);

            const symbols = result?.svg?.symbol || [];
            for (const symbol of symbols) {
                const id = symbol.$.id;
                if (id) {
                    iconNames.add(`"${id}"`);
                }
            }

            const iconNamesString = [...iconNames].join(' | ');
            const typesFileContent = `export type ${typeName} = ${iconNamesString};\n`;

            const iconNamesStringList = [...iconNames].join(', ');
            const typesFileContentList = `export const ${typeName}List = [${iconNamesStringList}] as const;\n`;

            const content = '// Autogenerated code by vite-plugin-svg-sprite-names-typescript\n' + typesFileContent + typesFileContentList;

            writeFile(typesFilePathResolved, content, consoleError);
        });

    });
}

function consoleError(err: any) {
    if (err) {
        console.error({ err });
    }
    return;
}